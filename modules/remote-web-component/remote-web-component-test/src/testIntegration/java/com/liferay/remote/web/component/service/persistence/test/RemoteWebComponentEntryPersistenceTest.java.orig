/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.remote.web.component.service.persistence.test;

import com.liferay.arquillian.extension.junit.bridge.junit.Arquillian;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ProjectionFactoryUtil;
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.dao.orm.RestrictionsFactoryUtil;
<<<<<<< HEAD
import com.liferay.portal.kernel.dao.orm.Session;
=======
>>>>>>> 5cece99... remote-web-component unmodified
import com.liferay.portal.kernel.test.ReflectionTestUtil;
import com.liferay.portal.kernel.test.rule.AggregateTestRule;
import com.liferay.portal.kernel.test.util.RandomTestUtil;
import com.liferay.portal.kernel.transaction.Propagation;
import com.liferay.portal.kernel.util.IntegerWrapper;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.OrderByComparatorFactoryUtil;
import com.liferay.portal.kernel.util.Time;
import com.liferay.portal.test.rule.LiferayIntegrationTestRule;
import com.liferay.portal.test.rule.PersistenceTestRule;
import com.liferay.portal.test.rule.TransactionalTestRule;
import com.liferay.remote.web.component.exception.NoSuchEntryException;
import com.liferay.remote.web.component.model.RemoteWebComponentEntry;
import com.liferay.remote.web.component.service.RemoteWebComponentEntryLocalServiceUtil;
import com.liferay.remote.web.component.service.persistence.RemoteWebComponentEntryPersistence;
import com.liferay.remote.web.component.service.persistence.RemoteWebComponentEntryUtil;

import java.io.Serializable;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
<<<<<<< HEAD
=======
import java.util.Objects;
>>>>>>> 5cece99... remote-web-component unmodified
import java.util.Set;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.ClassRule;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * @generated
 */
@RunWith(Arquillian.class)
public class RemoteWebComponentEntryPersistenceTest {

	@ClassRule
	@Rule
	public static final AggregateTestRule aggregateTestRule =
		new AggregateTestRule(
			new LiferayIntegrationTestRule(), PersistenceTestRule.INSTANCE,
			new TransactionalTestRule(
				Propagation.REQUIRED,
				"com.liferay.remote.web.component.service"));

	@Before
	public void setUp() {
		_persistence = RemoteWebComponentEntryUtil.getPersistence();

		Class<?> clazz = _persistence.getClass();

		_dynamicQueryClassLoader = clazz.getClassLoader();
	}

	@After
	public void tearDown() throws Exception {
		Iterator<RemoteWebComponentEntry> iterator =
			_remoteWebComponentEntries.iterator();

		while (iterator.hasNext()) {
			_persistence.remove(iterator.next());

			iterator.remove();
		}
	}

	@Test
	public void testCreate() throws Exception {
		long pk = RandomTestUtil.nextLong();

		RemoteWebComponentEntry remoteWebComponentEntry = _persistence.create(
			pk);

		Assert.assertNotNull(remoteWebComponentEntry);

		Assert.assertEquals(remoteWebComponentEntry.getPrimaryKey(), pk);
	}

	@Test
	public void testRemove() throws Exception {
		RemoteWebComponentEntry newRemoteWebComponentEntry =
			addRemoteWebComponentEntry();

		_persistence.remove(newRemoteWebComponentEntry);

		RemoteWebComponentEntry existingRemoteWebComponentEntry =
			_persistence.fetchByPrimaryKey(
				newRemoteWebComponentEntry.getPrimaryKey());

		Assert.assertNull(existingRemoteWebComponentEntry);
	}

	@Test
	public void testUpdateNew() throws Exception {
		addRemoteWebComponentEntry();
	}

	@Test
	public void testUpdateExisting() throws Exception {
		long pk = RandomTestUtil.nextLong();

		RemoteWebComponentEntry newRemoteWebComponentEntry =
			_persistence.create(pk);

		newRemoteWebComponentEntry.setMvccVersion(RandomTestUtil.nextLong());

		newRemoteWebComponentEntry.setUuid(RandomTestUtil.randomString());

		newRemoteWebComponentEntry.setCompanyId(RandomTestUtil.nextLong());

		newRemoteWebComponentEntry.setUserId(RandomTestUtil.nextLong());

		newRemoteWebComponentEntry.setUserName(RandomTestUtil.randomString());

		newRemoteWebComponentEntry.setCreateDate(RandomTestUtil.nextDate());

		newRemoteWebComponentEntry.setModifiedDate(RandomTestUtil.nextDate());

		newRemoteWebComponentEntry.setName(RandomTestUtil.randomString());

		newRemoteWebComponentEntry.setUrl(RandomTestUtil.randomString());

		_remoteWebComponentEntries.add(
			_persistence.update(newRemoteWebComponentEntry));

		RemoteWebComponentEntry existingRemoteWebComponentEntry =
			_persistence.findByPrimaryKey(
				newRemoteWebComponentEntry.getPrimaryKey());

		Assert.assertEquals(
			existingRemoteWebComponentEntry.getMvccVersion(),
			newRemoteWebComponentEntry.getMvccVersion());
		Assert.assertEquals(
			existingRemoteWebComponentEntry.getUuid(),
			newRemoteWebComponentEntry.getUuid());
		Assert.assertEquals(
			existingRemoteWebComponentEntry.getRemoteWebComponentEntryId(),
			newRemoteWebComponentEntry.getRemoteWebComponentEntryId());
		Assert.assertEquals(
			existingRemoteWebComponentEntry.getCompanyId(),
			newRemoteWebComponentEntry.getCompanyId());
		Assert.assertEquals(
			existingRemoteWebComponentEntry.getUserId(),
			newRemoteWebComponentEntry.getUserId());
		Assert.assertEquals(
			existingRemoteWebComponentEntry.getUserName(),
			newRemoteWebComponentEntry.getUserName());
		Assert.assertEquals(
			Time.getShortTimestamp(
				existingRemoteWebComponentEntry.getCreateDate()),
			Time.getShortTimestamp(newRemoteWebComponentEntry.getCreateDate()));
		Assert.assertEquals(
			Time.getShortTimestamp(
				existingRemoteWebComponentEntry.getModifiedDate()),
			Time.getShortTimestamp(
				newRemoteWebComponentEntry.getModifiedDate()));
		Assert.assertEquals(
			existingRemoteWebComponentEntry.getName(),
			newRemoteWebComponentEntry.getName());
		Assert.assertEquals(
			existingRemoteWebComponentEntry.getUrl(),
			newRemoteWebComponentEntry.getUrl());
	}

	@Test
	public void testCountByUuid() throws Exception {
		_persistence.countByUuid("");

		_persistence.countByUuid("null");

		_persistence.countByUuid((String)null);
	}

	@Test
	public void testCountByUuid_C() throws Exception {
		_persistence.countByUuid_C("", RandomTestUtil.nextLong());

		_persistence.countByUuid_C("null", 0L);

		_persistence.countByUuid_C((String)null, 0L);
	}

	@Test
	public void testCountByC_U() throws Exception {
		_persistence.countByC_U(RandomTestUtil.nextLong(), "");

		_persistence.countByC_U(0L, "null");

		_persistence.countByC_U(0L, (String)null);
	}

	@Test
	public void testFindByPrimaryKeyExisting() throws Exception {
		RemoteWebComponentEntry newRemoteWebComponentEntry =
			addRemoteWebComponentEntry();

		RemoteWebComponentEntry existingRemoteWebComponentEntry =
			_persistence.findByPrimaryKey(
				newRemoteWebComponentEntry.getPrimaryKey());

		Assert.assertEquals(
			existingRemoteWebComponentEntry, newRemoteWebComponentEntry);
	}

	@Test(expected = NoSuchEntryException.class)
	public void testFindByPrimaryKeyMissing() throws Exception {
		long pk = RandomTestUtil.nextLong();

		_persistence.findByPrimaryKey(pk);
	}

	@Test
	public void testFindAll() throws Exception {
		_persistence.findAll(
			QueryUtil.ALL_POS, QueryUtil.ALL_POS, getOrderByComparator());
	}

	protected OrderByComparator<RemoteWebComponentEntry>
		getOrderByComparator() {

		return OrderByComparatorFactoryUtil.create(
			"RemoteWebComponentEntry", "mvccVersion", true, "uuid", true,
			"remoteWebComponentEntryId", true, "companyId", true, "userId",
			true, "userName", true, "createDate", true, "modifiedDate", true,
			"name", true, "url", true);
	}

	@Test
	public void testFetchByPrimaryKeyExisting() throws Exception {
		RemoteWebComponentEntry newRemoteWebComponentEntry =
			addRemoteWebComponentEntry();

		RemoteWebComponentEntry existingRemoteWebComponentEntry =
			_persistence.fetchByPrimaryKey(
				newRemoteWebComponentEntry.getPrimaryKey());

		Assert.assertEquals(
			existingRemoteWebComponentEntry, newRemoteWebComponentEntry);
	}

	@Test
	public void testFetchByPrimaryKeyMissing() throws Exception {
		long pk = RandomTestUtil.nextLong();

		RemoteWebComponentEntry missingRemoteWebComponentEntry =
			_persistence.fetchByPrimaryKey(pk);

		Assert.assertNull(missingRemoteWebComponentEntry);
	}

	@Test
	public void testFetchByPrimaryKeysWithMultiplePrimaryKeysWhereAllPrimaryKeysExist()
		throws Exception {

		RemoteWebComponentEntry newRemoteWebComponentEntry1 =
			addRemoteWebComponentEntry();
		RemoteWebComponentEntry newRemoteWebComponentEntry2 =
			addRemoteWebComponentEntry();

		Set<Serializable> primaryKeys = new HashSet<Serializable>();

		primaryKeys.add(newRemoteWebComponentEntry1.getPrimaryKey());
		primaryKeys.add(newRemoteWebComponentEntry2.getPrimaryKey());

		Map<Serializable, RemoteWebComponentEntry> remoteWebComponentEntries =
			_persistence.fetchByPrimaryKeys(primaryKeys);

		Assert.assertEquals(2, remoteWebComponentEntries.size());
		Assert.assertEquals(
			newRemoteWebComponentEntry1,
			remoteWebComponentEntries.get(
				newRemoteWebComponentEntry1.getPrimaryKey()));
		Assert.assertEquals(
			newRemoteWebComponentEntry2,
			remoteWebComponentEntries.get(
				newRemoteWebComponentEntry2.getPrimaryKey()));
	}

	@Test
	public void testFetchByPrimaryKeysWithMultiplePrimaryKeysWhereNoPrimaryKeysExist()
		throws Exception {

		long pk1 = RandomTestUtil.nextLong();

		long pk2 = RandomTestUtil.nextLong();

		Set<Serializable> primaryKeys = new HashSet<Serializable>();

		primaryKeys.add(pk1);
		primaryKeys.add(pk2);

		Map<Serializable, RemoteWebComponentEntry> remoteWebComponentEntries =
			_persistence.fetchByPrimaryKeys(primaryKeys);

		Assert.assertTrue(remoteWebComponentEntries.isEmpty());
	}

	@Test
	public void testFetchByPrimaryKeysWithMultiplePrimaryKeysWhereSomePrimaryKeysExist()
		throws Exception {

		RemoteWebComponentEntry newRemoteWebComponentEntry =
			addRemoteWebComponentEntry();

		long pk = RandomTestUtil.nextLong();

		Set<Serializable> primaryKeys = new HashSet<Serializable>();

		primaryKeys.add(newRemoteWebComponentEntry.getPrimaryKey());
		primaryKeys.add(pk);

		Map<Serializable, RemoteWebComponentEntry> remoteWebComponentEntries =
			_persistence.fetchByPrimaryKeys(primaryKeys);

		Assert.assertEquals(1, remoteWebComponentEntries.size());
		Assert.assertEquals(
			newRemoteWebComponentEntry,
			remoteWebComponentEntries.get(
				newRemoteWebComponentEntry.getPrimaryKey()));
	}

	@Test
	public void testFetchByPrimaryKeysWithNoPrimaryKeys() throws Exception {
		Set<Serializable> primaryKeys = new HashSet<Serializable>();

		Map<Serializable, RemoteWebComponentEntry> remoteWebComponentEntries =
			_persistence.fetchByPrimaryKeys(primaryKeys);

		Assert.assertTrue(remoteWebComponentEntries.isEmpty());
	}

	@Test
	public void testFetchByPrimaryKeysWithOnePrimaryKey() throws Exception {
		RemoteWebComponentEntry newRemoteWebComponentEntry =
			addRemoteWebComponentEntry();

		Set<Serializable> primaryKeys = new HashSet<Serializable>();

		primaryKeys.add(newRemoteWebComponentEntry.getPrimaryKey());

		Map<Serializable, RemoteWebComponentEntry> remoteWebComponentEntries =
			_persistence.fetchByPrimaryKeys(primaryKeys);

		Assert.assertEquals(1, remoteWebComponentEntries.size());
		Assert.assertEquals(
			newRemoteWebComponentEntry,
			remoteWebComponentEntries.get(
				newRemoteWebComponentEntry.getPrimaryKey()));
	}

	@Test
	public void testActionableDynamicQuery() throws Exception {
		final IntegerWrapper count = new IntegerWrapper();

		ActionableDynamicQuery actionableDynamicQuery =
			RemoteWebComponentEntryLocalServiceUtil.getActionableDynamicQuery();

		actionableDynamicQuery.setPerformActionMethod(
			new ActionableDynamicQuery.PerformActionMethod
				<RemoteWebComponentEntry>() {

				@Override
				public void performAction(
					RemoteWebComponentEntry remoteWebComponentEntry) {

					Assert.assertNotNull(remoteWebComponentEntry);

					count.increment();
				}

			});

		actionableDynamicQuery.performActions();

		Assert.assertEquals(count.getValue(), _persistence.countAll());
	}

	@Test
	public void testDynamicQueryByPrimaryKeyExisting() throws Exception {
		RemoteWebComponentEntry newRemoteWebComponentEntry =
			addRemoteWebComponentEntry();

		DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(
			RemoteWebComponentEntry.class, _dynamicQueryClassLoader);

		dynamicQuery.add(
			RestrictionsFactoryUtil.eq(
				"remoteWebComponentEntryId",
				newRemoteWebComponentEntry.getRemoteWebComponentEntryId()));

		List<RemoteWebComponentEntry> result =
			_persistence.findWithDynamicQuery(dynamicQuery);

		Assert.assertEquals(1, result.size());

		RemoteWebComponentEntry existingRemoteWebComponentEntry = result.get(0);

		Assert.assertEquals(
			existingRemoteWebComponentEntry, newRemoteWebComponentEntry);
	}

	@Test
	public void testDynamicQueryByPrimaryKeyMissing() throws Exception {
		DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(
			RemoteWebComponentEntry.class, _dynamicQueryClassLoader);

		dynamicQuery.add(
			RestrictionsFactoryUtil.eq(
				"remoteWebComponentEntryId", RandomTestUtil.nextLong()));

		List<RemoteWebComponentEntry> result =
			_persistence.findWithDynamicQuery(dynamicQuery);

		Assert.assertEquals(0, result.size());
	}

	@Test
	public void testDynamicQueryByProjectionExisting() throws Exception {
		RemoteWebComponentEntry newRemoteWebComponentEntry =
			addRemoteWebComponentEntry();

		DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(
			RemoteWebComponentEntry.class, _dynamicQueryClassLoader);

		dynamicQuery.setProjection(
			ProjectionFactoryUtil.property("remoteWebComponentEntryId"));

		Object newRemoteWebComponentEntryId =
			newRemoteWebComponentEntry.getRemoteWebComponentEntryId();

		dynamicQuery.add(
			RestrictionsFactoryUtil.in(
				"remoteWebComponentEntryId",
				new Object[] {newRemoteWebComponentEntryId}));

		List<Object> result = _persistence.findWithDynamicQuery(dynamicQuery);

		Assert.assertEquals(1, result.size());

		Object existingRemoteWebComponentEntryId = result.get(0);

		Assert.assertEquals(
			existingRemoteWebComponentEntryId, newRemoteWebComponentEntryId);
	}

	@Test
	public void testDynamicQueryByProjectionMissing() throws Exception {
		DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(
			RemoteWebComponentEntry.class, _dynamicQueryClassLoader);

		dynamicQuery.setProjection(
			ProjectionFactoryUtil.property("remoteWebComponentEntryId"));

		dynamicQuery.add(
			RestrictionsFactoryUtil.in(
				"remoteWebComponentEntryId",
				new Object[] {RandomTestUtil.nextLong()}));

		List<Object> result = _persistence.findWithDynamicQuery(dynamicQuery);

		Assert.assertEquals(0, result.size());
	}

	@Test
	public void testResetOriginalValues() throws Exception {
		RemoteWebComponentEntry newRemoteWebComponentEntry =
			addRemoteWebComponentEntry();

		_persistence.clearCache();

<<<<<<< HEAD
		_assertOriginalValues(
			_persistence.findByPrimaryKey(
				newRemoteWebComponentEntry.getPrimaryKey()));
	}

	@Test
	public void testResetOriginalValuesWithDynamicQueryLoadFromDatabase()
		throws Exception {

		_testResetOriginalValuesWithDynamicQuery(true);
	}

	@Test
	public void testResetOriginalValuesWithDynamicQueryLoadFromSession()
		throws Exception {

		_testResetOriginalValuesWithDynamicQuery(false);
	}

	private void _testResetOriginalValuesWithDynamicQuery(boolean clearSession)
		throws Exception {

		RemoteWebComponentEntry newRemoteWebComponentEntry =
			addRemoteWebComponentEntry();

		if (clearSession) {
			Session session = _persistence.openSession();

			session.flush();

			session.clear();
		}

		DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(
			RemoteWebComponentEntry.class, _dynamicQueryClassLoader);

		dynamicQuery.add(
			RestrictionsFactoryUtil.eq(
				"remoteWebComponentEntryId",
				newRemoteWebComponentEntry.getRemoteWebComponentEntryId()));

		List<RemoteWebComponentEntry> result =
			_persistence.findWithDynamicQuery(dynamicQuery);

		_assertOriginalValues(result.get(0));
	}

	private void _assertOriginalValues(
		RemoteWebComponentEntry remoteWebComponentEntry) {

		Assert.assertEquals(
			Long.valueOf(remoteWebComponentEntry.getCompanyId()),
			ReflectionTestUtil.<Long>invoke(
				remoteWebComponentEntry, "getColumnOriginalValue",
				new Class<?>[] {String.class}, "companyId"));
		Assert.assertEquals(
			remoteWebComponentEntry.getUrl(),
			ReflectionTestUtil.invoke(
				remoteWebComponentEntry, "getColumnOriginalValue",
				new Class<?>[] {String.class}, "url"));
=======
		RemoteWebComponentEntry existingRemoteWebComponentEntry =
			_persistence.findByPrimaryKey(
				newRemoteWebComponentEntry.getPrimaryKey());

		Assert.assertEquals(
			Long.valueOf(existingRemoteWebComponentEntry.getCompanyId()),
			ReflectionTestUtil.<Long>invoke(
				existingRemoteWebComponentEntry, "getOriginalCompanyId",
				new Class<?>[0]));
		Assert.assertTrue(
			Objects.equals(
				existingRemoteWebComponentEntry.getUrl(),
				ReflectionTestUtil.invoke(
					existingRemoteWebComponentEntry, "getOriginalUrl",
					new Class<?>[0])));
>>>>>>> 5cece99... remote-web-component unmodified
	}

	protected RemoteWebComponentEntry addRemoteWebComponentEntry()
		throws Exception {

		long pk = RandomTestUtil.nextLong();

		RemoteWebComponentEntry remoteWebComponentEntry = _persistence.create(
			pk);

		remoteWebComponentEntry.setMvccVersion(RandomTestUtil.nextLong());

		remoteWebComponentEntry.setUuid(RandomTestUtil.randomString());

		remoteWebComponentEntry.setCompanyId(RandomTestUtil.nextLong());

		remoteWebComponentEntry.setUserId(RandomTestUtil.nextLong());

		remoteWebComponentEntry.setUserName(RandomTestUtil.randomString());

		remoteWebComponentEntry.setCreateDate(RandomTestUtil.nextDate());

		remoteWebComponentEntry.setModifiedDate(RandomTestUtil.nextDate());

		remoteWebComponentEntry.setName(RandomTestUtil.randomString());

		remoteWebComponentEntry.setUrl(RandomTestUtil.randomString());

		_remoteWebComponentEntries.add(
			_persistence.update(remoteWebComponentEntry));

		return remoteWebComponentEntry;
	}

	private List<RemoteWebComponentEntry> _remoteWebComponentEntries =
		new ArrayList<RemoteWebComponentEntry>();
	private RemoteWebComponentEntryPersistence _persistence;
	private ClassLoader _dynamicQueryClassLoader;

}